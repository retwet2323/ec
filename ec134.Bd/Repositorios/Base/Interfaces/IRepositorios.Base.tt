<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="C:\Proyectos\ec134\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ assembly name="$(SolutionDir)ec134.Bd\bin\Debug\ec134.Bd.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #>
<#@ import namespace="ec134.Bd.Model" #>

<#
    //CAMBIAR: Namespace del entity

    string namespaceEntity = "ec134.Bd.Model";
    //CAMBIAR: Tipo del contexto
    Type contextType = typeof(ec134Context); 
    

    IEnumerable<Type> tipos = GetTypesInNamespace(Assembly.GetAssembly(contextType), namespaceEntity).Where(x=>!x.Equals(contextType) && !x.BaseType.Equals(typeof(System.Enum)) && !x.Name.Equals("<>c"));

    string namespaceClass = "ec134.Bd.Repositorios.Base";

    foreach(Type tipo in tipos)
    {
        IEnumerable<PropertyInfo> primaryKeys = tipo.GetProperties().Where(x=>IsPrimaryKey(x));
        IEnumerable<PropertyInfo> uniqueKeys = tipo.GetProperties().Where(x=>IsUniqueKey(x));
        IEnumerable<PropertyInfo> foreignKeys = tipo.GetProperties().Where(x=>IsForeignKey(x));
    
        
#>
using System;
using Graddo.Common.Db;
using System.Linq;
using System.Threading.Tasks;
using <#= namespaceEntity #>;

namespace <#= namespaceClass #>
{
    public interface IRepositorio<#= tipo.Name #>Base
	{
		/// <summary>
        /// Metodo para obtener todos los <#= tipo.Name #> 
        /// </summary>
        /// <returns>IQueryable con todos los <#= tipo.Name #></returns>
		IQueryable<<#= tipo.Name #>> Get<#= tipo.Name #>();
		
        <# 
        string constructor = string.Join(",", primaryKeys.Select(x=>$"{GetTypeString(x.PropertyType)} {FormatNameVariable(x.Name)}"));
        #>

        /// <summary>
        /// Obtener un <#= tipo.Name #> por su clave primaria
        /// </summary>
		<#
		foreach(PropertyInfo primaryKey in primaryKeys){
		#>
		/// <param name="<#= FormatNameVariable(primaryKey.Name) #>"><#= primaryKey.Name #></param>
		<#
		}
		#>
        /// <returns><#= tipo.Name #>   seleccionado por su clave primaria</returns>
		Task<<#= tipo.Name #>> Get<#= tipo.Name #>ByPrimaryKeyAsync(<#=constructor #>);
		
        /// <summary>
        /// Obtener un <#= tipo.Name #> por su clave primaria
        /// </summary>
		<#
		foreach(PropertyInfo primaryKey in primaryKeys){
		#>
		/// <param name="<#= FormatNameVariable(primaryKey.Name) #>"><#= primaryKey.Name #></param>
		<#
		}
		#>
        /// <returns><#= tipo.Name #>  seleccionado por su clave primaria</returns>
		<#= tipo.Name #> Get<#= tipo.Name #>ByPrimaryKey(<#=constructor #>);


        
<#
		foreach(PropertyInfo uniqueKey in uniqueKeys){
                     
        string constructorUnique = $"{GetTypeString(uniqueKey.PropertyType)} {FormatNameVariable(uniqueKey.Name)}";
        string expressionUnique = $"x=> x.{uniqueKey.Name} == {FormatNameVariable(uniqueKey.Name)}";
        
#>
        /// <summary>
        /// Obtener un <#= tipo.Name #> por su clave unica <#= uniqueKey.Name #>
        /// </summary>
		/// <param name="<#= FormatNameVariable(uniqueKey.Name) #>"><#= uniqueKey.Name #></param>
        /// <returns><#= tipo.Name #>   seleccionado por su clave única</returns>
        Task<<#= tipo.Name #>> Get<#= tipo.Name #>By<#= uniqueKey.Name #>Async(<#=constructorUnique #>);

        /// <summary>
        /// Obtener un <#= tipo.Name #> por su clave unica <#= uniqueKey.Name #>
        /// </summary>
		/// <param name="<#= FormatNameVariable(uniqueKey.Name) #>"><#= uniqueKey.Name #></param>
        /// <returns><#= tipo.Name #>   seleccionado por su clave única</returns>
		<#= tipo.Name #> Get<#= tipo.Name #>By<#= uniqueKey.Name #>(<#=constructorUnique #>);

<#
		}
#>

<#
		foreach(PropertyInfo foreignKey in foreignKeys){
                     
            string constructorForeign = $"{GetTypeString(foreignKey.PropertyType)} {FormatNameVariable(foreignKey.Name)}";
        
#>
        /// <summary>
        /// Obtener un IQueryable<<#= tipo.Name #>> por su <#=foreignKey.Name #> 
        /// </summary>
		/// <param name="<#= FormatNameVariable(foreignKey.Name) #>"><#= foreignKey.Name #></param>
        /// <returns>IQueryable con los <#= tipo.Name #> seleccionado por su <#=foreignKey.Name #> </returns>
        IQueryable<<#= tipo.Name #>> Get<#= tipo.Name #>By<#= foreignKey.Name #>(<#=constructorForeign #>);

<#
		}
#>

		/// <summary>
        /// Crea una instancia de <#= tipo.Name #> en la base de datos
        /// </summary>
        /// <param name="source"><#= tipo.Name #> a crear</param>
        /// <returns><#= tipo.Name #> creado</returns>
		Task<<#= tipo.Name #>> Create<#= tipo.Name #>Async(<#= tipo.Name #> source);

		/// <summary>
        /// Crea una instancia de <#= tipo.Name #> en la base de datos
        /// </summary>
        /// <param name="source"><#= tipo.Name #> a crear</param>
        /// <returns><#= tipo.Name #> creado</returns>
		<#= tipo.Name #> Create<#= tipo.Name #>(<#= tipo.Name #> source);


		/// <summary>
        /// Modifica una instancia de <#= tipo.Name #> en la base de datos
        /// </summary>
        /// <param name="source"><#= tipo.Name #> a modificar</param>
        /// <returns>Número de <#= tipo.Name #> modificados</returns>
		Task<int> Update<#= tipo.Name #>Async(<#= tipo.Name #> source);
		

		/// <summary>
        /// Modifica una instancia de <#= tipo.Name #> en la base de datos
        /// </summary>
        /// <param name="source"><#= tipo.Name #> a modificar</param>
        /// <returns>Número de <#= tipo.Name #> modificados</returns>
		int Update<#= tipo.Name #>(<#= tipo.Name #> source);

		/// <summary>
        /// Borra una instancia de <#= tipo.Name #> en la base de datos
        /// </summary>
        /// <param name="source"><#= tipo.Name #> a borrar</param>
        /// <returns>Número de <#= tipo.Name #> borrados</returns>
		Task<int> Delete<#= tipo.Name #>Async(<#= tipo.Name #> source);
		
		/// <summary>
        /// Borra una instancia de <#= tipo.Name #> en la base de datos
        /// </summary>
        /// <param name="source"><#= tipo.Name #> a borrar</param>
        /// <returns>Número de <#= tipo.Name #> borrados</returns>
		int Delete<#= tipo.Name #>(<#= tipo.Name #> source);
    }
}
<#
        SaveOutput($"IRepositorio{tipo.Name}Base.cs");
    }
#>

<#+
    void SaveOutput(string outputFileName){
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile));
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
		File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>
<#+
    bool IsPrimaryKey(PropertyInfo property)
    {
        return property.CustomAttributes.Any(x=> x.AttributeType == typeof(KeyAttribute));
    }
#>

<#+
    bool IsUniqueKey(PropertyInfo property)
    {
        return property.CustomAttributes.Any(x=> x.NamedArguments.Any(y => y.MemberName == "IsUnique" && (bool)y.TypedValue.Value));
    }
#>

<#+
    bool IsForeignKey(PropertyInfo property)
    {
        return property.CustomAttributes.Any(x=> x.AttributeType == typeof(ForeignKeyAttribute));
    }
#>

<#+
    IEnumerable<Type> GetTypesInNamespace(Assembly assembly, string nameSpace)
    {
        return assembly.GetTypes().Where(t => String.Equals(t.Namespace, nameSpace, StringComparison.Ordinal));
    }
#>
<#+
    string GetTypeString(Type type){
        switch (type.Name)
        {
            case "Boolean":
                return "bool";
            case "Char":
                return "char";
            case "Byte":
                return "byte";
            case "Single":
                return "float";
            case "Double":
                return "double";
            case "Int32":
                return "int";
            case "String":
                return "string";
            case "ICollection`1":
                return $"virtual ICollection<{GetTypeString(type.GetGenericArguments().Single())}>";
            case "Nullable`1":
                return $"{GetTypeString(type.GetGenericArguments().Single())}?";
            default:
                return type.Name;
        }
    }
#>

<#+
    string FormatNameVariable(string input){
        return input.First().ToString().ToLower() + input.Substring(1);
    }
#>