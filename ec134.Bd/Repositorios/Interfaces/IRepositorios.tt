<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="C:\Proyectos\ec134\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ assembly name="$(SolutionDir)ec134.Bd\bin\Debug\ec134.Bd.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #>
<#@ import namespace="ec134.Bd.Model" #> 

<#
    //CAMBIAR: Namespace del entity
    string namespaceEntity = "ec134.Bd.Model";

    //CAMBIAR: Namespace del base
    string namespaceBase = "ec134.Bd.Repositorios.Base";
    //CAMBIAR: Tipo del contexto
    Type contextType = typeof(ec134Context); 
    

    IEnumerable<Type> tipos = GetTypesInNamespace(Assembly.GetAssembly(contextType), namespaceEntity).Where(x=>!x.Equals(contextType) && !x.BaseType.Equals(typeof(System.Enum)) && !x.Name.Equals("<>c"));

    string namespaceClass = "ec134.Bd.Repositorios";

    foreach(Type tipo in tipos)
    {
        IEnumerable<PropertyInfo> primaryKeys = tipo.GetProperties().Where(x=>IsPrimaryKey(x));
        IEnumerable<PropertyInfo> uniqueKeys = tipo.GetProperties().Where(x=>IsUniqueKey(x));
    
        
#>
using System.Linq;
using <#= namespaceEntity #>;
using <#= namespaceBase #>;

namespace <#= namespaceClass #>
{
    public interface IRepositorio<#= tipo.Name #> : IRepositorio<#= tipo.Name #>Base
	{

    }
}
<#
        SaveOutput($"IRepositorio{tipo.Name}.cs");
    }
#>

<#+
    void SaveOutput(string outputFileName){
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile));
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        if(!File.Exists(outputFilePath)){
            File.Delete(outputFilePath);
            File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        }
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>

<#+
    bool IsPrimaryKey(PropertyInfo property)
    {
        return property.CustomAttributes.Any(x=> x.AttributeType == typeof(KeyAttribute));
    }
#>

<#+
    bool IsUniqueKey(PropertyInfo property)
    {
        return property.CustomAttributes.Any(x=> x.NamedArguments.Any(y => y.MemberName == "IsUnique" && (bool)y.TypedValue.Value));
    }
#>

<#+
    IEnumerable<Type> GetTypesInNamespace(Assembly assembly, string nameSpace)
    {
        return assembly.GetTypes().Where(t => String.Equals(t.Namespace, nameSpace, StringComparison.Ordinal));
    }
#>

<#+
    string GetTypeString(Type type){
        switch (type.Name)
        {
            case "Boolean":
                return "bool";
            case "Char":
                return "char";
            case "Byte":
                return "byte";
            case "Single":
                return "float";
            case "Double":
                return "double";
            case "Int32":
                return "int";
            case "String":
                return "string";
            default:
                return type.Name;
        }
    }
#>

<#+
    string FormatNameVariable(string input){
        return input.First().ToString().ToLower() + input.Substring(1);
    }
#>